# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\alex\Documents\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pika
import threading


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1270, 917)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(1050, 810, 191, 41))
        self.pushButton.setObjectName("pushButton")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(30, 810, 1011, 41))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(30, 30, 1211, 761))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1270, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.send_message)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Messenger"))
        self.pushButton.setText(_translate("MainWindow", "Отправить"))

    def send_message(self):
        message = self.plainTextEdit.toPlainText()

        # Установка соединения с RabbitMQ
        connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
        channel = connection.channel()

        # Создание очереди с именем 'messages'
        channel.queue_declare(queue='messages')

        # Опубликование сообщения в очередь 'messages'
        channel.basic_publish(exchange='', routing_key='messages', body=message)

        # Закрытие соединения с RabbitMQ
        connection.close()

        # Очистка текста в plainTextEdit
        self.plainTextEdit.clear()

    def receive_message(self, ch, method, properties, body):
        message = body.decode('utf-8')
        self.textBrowser.append(message)

    def start_listening(self):
        # Установка соединения с RabbitMQ
        connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
        channel = connection.channel()

        # Создание очереди с именем 'messages'
        channel.queue_declare(queue='messages')

        # Привязка метода receive_message к обработчику сообщений RabbitMQ
        channel.basic_consume(queue='messages', on_message_callback=self.receive_message, auto_ack=True)

        # Запуск слушателя сообщений RabbitMQ
        channel.start_consuming()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    # Запуск отдельного потока для слушателя сообщений
    thread = threading.Thread(target=ui.start_listening)
    thread.start()

    sys.exit(app.exec_())
